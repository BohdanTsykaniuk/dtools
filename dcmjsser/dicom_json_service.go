package main

import "io/ioutil"
import "net/http"
import "strconv"
import "log"
import "encoding/json"
import "errors"

//import "encoding/base64"

const htmlData = ""

type HttpResReq struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
}

//main service class
type DicomJsonService struct {
	jobBallancer    JobBallancer
	dicomDispatcher DicomDispatcher
	responses       map[string]HttpResReq
}

//start and init service
func (service *DicomJsonService) Start(listenPort int) error {
	http.HandleFunc("/c-echo", service.cEcho)
	http.HandleFunc("/index.html", service.ServePage)
	if err := http.ListenAndServe(":"+strconv.Itoa(listenPort), nil); err != nil {
		return errors.New("error: can't start listen http server")
	}
	service.jobBallancer.Init(&service.dicomDispatcher, new(OnCompletedResp), new(OnErrorResp))
	service.responses = make(map[string]HttpResReq)
	return nil
}

//serve cEcho responce
func (service *DicomJsonService) cEcho(responseWriter http.ResponseWriter, request *http.Request) {
	defer request.Body.Close()
	bodyData, err := ioutil.ReadAll(request.Body)
	if err != nil {
		strErr := "error: Can't read http body data"
		responseWriter.Write([]byte(strErr))
		log.Println(strErr)
		return
	}
	var dicomCEchoRequest DicomCEchoRequest
	if err := json.Unmarshal(bodyData, &dicomCEchoRequest); err != nil {
		strErr := "error: can't parse DicomCEchoRequest data"
		responseWriter.Write([]byte(strErr))
		log.Println(strErr)
	}

	if guid, err := service.jobBallancer.PushJob(dicomCEchoRequest); err == nil {
		service.responses[guid] = HttpResReq{Request: request, ResponseWriter: responseWriter}
	} else {
		log.Printf("error: can't push job")
	}

}

//serve main page request
func (service *DicomJsonService) ServePage(responseWriter http.ResponseWriter, request *http.Request) {
	responseWriter.Header().Set("Content-Type: text/html", "*")

	content, err := ioutil.ReadFile("index.html") //base64.StdEncoding.DecodeString(htmlData)
	if err != nil {
		responseWriter.Write([]byte("error: Can't find start page \n"))
		return
	}
	responseWriter.Write(content)
}
