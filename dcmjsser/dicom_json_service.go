package main

import "io/ioutil"
import "net/http"
import "strconv"
import "log"
import "encoding/json"
import "errors"

import "encoding/base64"

const htmlData = ""

//main service class
type DicomJsonService struct {
	jobBallancer    JobBallancer
	dicomDispatcher DicomDispatcher
	remoteSCPState  DicomCEchoResult
}

//start and init service
func (service *DicomJsonService) Start(listenPort int) error {
	service.jobBallancer.Init(&service.dicomDispatcher, service, service)
	service.dicomDispatcher.dcomClient.CallerAE_Title = "AE_DTOOLS"
	http.HandleFunc("/c-echo", service.cEcho)
	http.HandleFunc("/index.html", service.ServePage)
	if err := http.ListenAndServe(":"+strconv.Itoa(listenPort), nil); err != nil {
		return errors.New("error: can't start listen http server")
	}
	return nil
}

//serve cEcho responce
func (service *DicomJsonService) cEcho(responseWriter http.ResponseWriter, request *http.Request) {
	defer request.Body.Close()
	bodyData, err := ioutil.ReadAll(request.Body)
	if err != nil {
		strErr := "error: Can't read http body data"
		http.Error(responseWriter, err.Error(), http.StatusInternalServerError)
		log.Println(strErr)
		return
	}
	var dicomCEchoRequest DicomCEchoRequest
	if err := json.Unmarshal(bodyData, &dicomCEchoRequest); err != nil {
		strErr := "error: can't parse DicomCEchoRequest data"
		http.Error(responseWriter, err.Error(), http.StatusInternalServerError)
		log.Println(strErr)
		return
	}

	if _, err := service.jobBallancer.PushJob(dicomCEchoRequest); err != nil {
		log.Printf("error: can't push job")
		http.Error(responseWriter, err.Error(), http.StatusInternalServerError)
		return

	} else {
		js, err := json.Marshal(service.remoteSCPState)
		if err != nil {
			log.Printf("error: can't Marshal job")
			http.Error(responseWriter, err.Error(), http.StatusInternalServerError)
			return
		}
		responseWriter.Write(js)
	}

}

//serve main page request
func (service *DicomJsonService) ServePage(responseWriter http.ResponseWriter, request *http.Request) {
	responseWriter.Header().Set("Content-Type: text/html", "*")

	content, err := ioutil.ReadFile("index.html")
	if err != nil {
		val, _ := base64.StdEncoding.DecodeString(htmlData)
		responseWriter.Write(val)
		return
	}
	responseWriter.Write(content)
}

func (service *DicomJsonService) DispatchError(failedJob FailedJob) error {
	log.Println("info: DispatchError")
	return nil
}

func (service *DicomJsonService) DispatchSuccess(completedJob CompletedJob) error {
	log.Println("info: DispatchSuccess")
	switch result := completedJob.ResultData.(type) {
	case DicomCEchoResult:
		return service.OnCFindDone(result)
	default:
		log.Printf("unexpected job type %v", result)
	}
	return nil
}

func (service *DicomJsonService) OnCFindDone(dicomCFindResult DicomCEchoResult) error {
	service.remoteSCPState = dicomCFindResult
	return nil
}
